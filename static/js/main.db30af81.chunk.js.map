{"version":3,"sources":["PathfindingVisualizer/Node/Node.jsx","algorithms/dijkstra.js","algorithms/dfs.js","algorithms/bfs.js","algorithms/astar.js","PathfindingVisualizer/PathfindingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","props","state","this","isFinish","isStart","isVisited","isWall","row","col","onMouseDown","onMouseEnter","onMouseUp","extraClassName","id","className","Component","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodeByDistance","closestNode","shift","Infinity","updateUnvisitedNeighbors","sort","nodeA","nodeB","neighbors","filter","getUnvisitedNeighbors","neighbor","previousNode","getUnvisitedNeighbor","astar","newDist","manhattanDistance","node1","node2","row1","col1","row2","col2","Math","abs","PathfindingVisualizer","mouseIsPressed","start_row","start_col","fin_row","fin_col","set_start","set_end","inAnimation","getInitialGrid","setState","nodesInShortestPathOrder","clearPath","i","setTimeout","animatePath","document","getElementById","currentNode","unshift","getNodesInShortestPathOrder","animateAlgorithm","nodeQueue","currNode","unvisitedNeighbors","dfs","nodesInDFSPathOrder","getDFSPath","level_size","isAddedToQueue","bfs","nodesInBFSPathOrder","getBFSPath","nodesInAStarPathOrder","getAStarPath","newGrid","setStartNode","setEndNode","getNewGridWithWallToggled","forceUpdate","onClick","visualizeDijkstra","visualizeDFS","visualizeBFS","visualizeAStar","toggleStart","toggleEnd","toggleOff","clearBoard","map","rowIdx","key","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","curr_row","createNode","slice","newNode","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.db30af81.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Node.css';\r\n\r\nexport default class Node extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {};\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst {\r\n\t\t\tisFinish,\r\n\t\t\tisStart,\r\n\t\t\tisVisited,\r\n\t\t\tisWall,\r\n\t\t\trow,\r\n\t\t\tcol,\r\n\t\t\tonMouseDown,\r\n\t\t\tonMouseEnter,\r\n\t\t\tonMouseUp,\r\n\t\t} = this.props;\r\n\t\tconst extraClassName = isFinish\r\n\t\t\t? 'node-finish'\r\n\t\t\t: isStart\r\n\t\t\t? 'node-start'\r\n\t\t\t: isVisited\r\n\t\t\t? 'node-visited'\r\n\t\t\t: isWall\r\n\t\t\t? 'node-wall'\r\n\t\t\t: '';\r\n\t\treturn (\r\n\t\t\t<div\r\n\t\t\t\tid={`node-${row}-${col}`}\r\n\t\t\t\tclassName={`node ${extraClassName}`}\r\n\t\t\t\tonMouseDown={() => onMouseDown(row, col)}\r\n\t\t\t\tonMouseEnter={() => onMouseEnter(row, col)}\r\n\t\t\t\tonMouseUp={() => onMouseUp()}\r\n\t\t\t></div>\r\n\t\t);\r\n\t}\r\n}\r\n","export function dijkstra(grid, startNode, finishNode) {\r\n\tconst visitedNodesInOrder = [];\r\n\tif (!startNode || !finishNode || startNode === finishNode) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tstartNode.distance = 0;\r\n\tconst unvisitedNodes = getAllNodes(grid);\r\n\twhile (!!unvisitedNodes.length) {\r\n\t\tsortNodeByDistance(unvisitedNodes);\r\n\t\tconst closestNode = unvisitedNodes.shift();\r\n\t\tif (closestNode.isWall) continue;\r\n\t\tif (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n\t\tclosestNode.isVisited = true;\r\n\t\tvisitedNodesInOrder.push(closestNode);\r\n\t\tif (closestNode === finishNode) return visitedNodesInOrder;\r\n\t\tupdateUnvisitedNeighbors(closestNode, grid);\r\n\t}\r\n}\r\n\r\nfunction sortNodeByDistance(unvisitedNodes) {\r\n\tunvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n\tconst nodes = [];\r\n\tfor (const row of grid) {\r\n\t\tfor (const node of row) {\r\n\t\t\tnodes.push(node);\r\n\t\t}\r\n\t}\r\n\treturn nodes;\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n\tconst neighbors = getUnvisitedNeighbors(node, grid);\r\n\tfor (const neighbor of neighbors) {\r\n\t\tneighbor.distance = node.distance + 1;\r\n\t\tneighbor.previousNode = node;\r\n\t}\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n\tconst neighbors = [];\r\n\tconst { col, row } = node;\r\n\tif (row > 0) neighbors.push(grid[row - 1][col]);\r\n\tif (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n\tif (col > 0) neighbors.push(grid[row][col - 1]);\r\n\tif (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n\r\n\treturn neighbors.filter((neighbors) => !neighbors.isVisited);\r\n}\r\n\r\nexport function getNodesInShortestPathOrder(finishNode) {\r\n\tconst nodesInShortestPathOrder = [];\r\n\tlet currentNode = finishNode;\r\n\tif (currentNode.previousNode != null) {\r\n\t\twhile (currentNode !== null) {\r\n\t\t\tnodesInShortestPathOrder.unshift(currentNode);\r\n\t\t\tcurrentNode = currentNode.previousNode;\r\n\t\t}\r\n\t}\r\n\r\n\treturn nodesInShortestPathOrder;\r\n}\r\n","export function dfs(grid, startNode, finishNode) {\r\n\tconst visitedNodesInOrder = [];\r\n\tconst nodeQueue = [];\r\n\tif (!startNode || !finishNode || startNode === finishNode) {\r\n\t\treturn false;\r\n\t}\r\n\tnodeQueue.unshift(startNode);\r\n\twhile (!!nodeQueue.length) {\r\n\t\tconst currNode = nodeQueue.shift();\r\n\t\tif (currNode === finishNode) return visitedNodesInOrder;\r\n\t\tvisitedNodesInOrder.push(currNode);\r\n\t\tcurrNode.isVisited = true;\r\n\t\tconst unvisitedNeighbors = getUnvisitedNeighbor(grid, currNode);\r\n\r\n\t\tfor (const neighbor of unvisitedNeighbors) {\r\n\t\t\tif (neighbor.isWall) continue;\r\n\t\t\tif (neighbor.previousNode === null) {\r\n\t\t\t\tneighbor.previousNode = currNode;\r\n\t\t\t}\r\n\t\t\tnodeQueue.unshift(neighbor);\r\n\t\t}\r\n\t}\r\n\r\n\treturn visitedNodesInOrder;\r\n}\r\n\r\nfunction getUnvisitedNeighbor(grid, node) {\r\n\tconst neighbors = [];\r\n\tconst { col, row } = node;\r\n\tif (row > 0) neighbors.push(grid[row - 1][col]);\r\n\tif (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n\tif (col > 0) neighbors.push(grid[row][col - 1]);\r\n\tif (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n\r\n\treturn neighbors.filter((neighbors) => !neighbors.isVisited);\r\n}\r\n\r\nexport function getDFSPath(finishNode) {\r\n\tconst nodesInShortestPathOrder = [];\r\n\tlet currentNode = finishNode;\r\n\tif (currentNode.previousNode != null) {\r\n\t\twhile (currentNode !== null) {\r\n\t\t\tnodesInShortestPathOrder.unshift(currentNode);\r\n\t\t\tcurrentNode = currentNode.previousNode;\r\n\t\t}\r\n\t}\r\n\r\n\treturn nodesInShortestPathOrder;\r\n}\r\n","export function bfs(grid, startNode, finishNode) {\r\n\tconst visitedNodesInOrder = [];\r\n\tconst nodeQueue = [];\r\n\tif (!startNode || !finishNode || startNode === finishNode) {\r\n\t\treturn false;\r\n\t}\r\n\tnodeQueue.unshift(startNode);\r\n\twhile (!!nodeQueue.length) {\r\n\t\tconst level_size = nodeQueue.length;\r\n\t\tfor (let i = 0; i < level_size; i++) {\r\n\t\t\tconst currNode = nodeQueue.shift();\r\n\t\t\tif (currNode === finishNode) return visitedNodesInOrder;\r\n\t\t\tvisitedNodesInOrder.push(currNode);\r\n\t\t\tcurrNode.isVisited = true;\r\n\t\t\tconst unvisitedNeighbors = getUnvisitedNeighbor(grid, currNode);\r\n\r\n\t\t\tfor (const neighbor of unvisitedNeighbors) {\r\n\t\t\t\tif (neighbor.isWall) continue;\r\n\t\t\t\tif (neighbor.previousNode === null) {\r\n\t\t\t\t\tneighbor.previousNode = currNode;\r\n\t\t\t\t}\r\n\t\t\t\tif (!neighbor.isAddedToQueue) {\r\n\t\t\t\t\tneighbor.isAddedToQueue = true;\r\n\t\t\t\t\tnodeQueue.push(neighbor);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn visitedNodesInOrder;\r\n}\r\n\r\nfunction getUnvisitedNeighbor(grid, node) {\r\n\tconst neighbors = [];\r\n\tconst { col, row } = node;\r\n\tif (row > 0) neighbors.push(grid[row - 1][col]);\r\n\tif (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n\tif (col > 0) neighbors.push(grid[row][col - 1]);\r\n\tif (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n\r\n\treturn neighbors.filter((neighbors) => !neighbors.isVisited);\r\n}\r\n\r\nexport function getBFSPath(finishNode) {\r\n\tconst nodesInShortestPathOrder = [];\r\n\tlet currentNode = finishNode;\r\n\tif (currentNode.previousNode != null) {\r\n\t\twhile (currentNode !== null) {\r\n\t\t\tnodesInShortestPathOrder.unshift(currentNode);\r\n\t\t\tcurrentNode = currentNode.previousNode;\r\n\t\t}\r\n\t}\r\n\r\n\treturn nodesInShortestPathOrder;\r\n}\r\n","export function astar(grid, startNode, finishNode) {\r\n\tconst visitedNodesInOrder = [];\r\n\tif (!startNode || !finishNode || startNode === finishNode) {\r\n\t\treturn false;\r\n\t}\r\n\r\n\tstartNode.distance = 0;\r\n\tconst unvisitedNodes = getAllNodes(grid);\r\n\twhile (!!unvisitedNodes.length) {\r\n\t\tsortNodeByDistance(unvisitedNodes);\r\n\t\tconst closestNode = unvisitedNodes.shift();\r\n\t\tif (closestNode.isWall) continue;\r\n\t\tif (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n\t\tclosestNode.isVisited = true;\r\n\t\tvisitedNodesInOrder.push(closestNode);\r\n\t\tif (closestNode === finishNode) return visitedNodesInOrder;\r\n\t\tupdateUnvisitedNeighbors(closestNode, grid, finishNode);\r\n\t}\r\n}\r\n\r\nfunction sortNodeByDistance(unvisitedNodes) {\r\n\tunvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n\tconst nodes = [];\r\n\tfor (const row of grid) {\r\n\t\tfor (const node of row) {\r\n\t\t\tnodes.push(node);\r\n\t\t}\r\n\t}\r\n\treturn nodes;\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid, finishNode) {\r\n\tconst neighbors = getUnvisitedNeighbors(node, grid);\r\n\tfor (const neighbor of neighbors) {\r\n\t\tconst newDist =\r\n\t\t\tmanhattanDistance(node, neighbor) +\r\n\t\t\tmanhattanDistance(finishNode, neighbor);\r\n\t\tif (newDist < neighbor.distance) {\r\n\t\t\tneighbor.distance = newDist;\r\n\t\t\tneighbor.previousNode = node;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n\tconst neighbors = [];\r\n\tconst { col, row } = node;\r\n\tif (row > 0) neighbors.push(grid[row - 1][col]);\r\n\tif (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n\tif (col > 0) neighbors.push(grid[row][col - 1]);\r\n\tif (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n\r\n\treturn neighbors.filter((neighbors) => !neighbors.isVisited);\r\n}\r\n\r\nfunction manhattanDistance(node1, node2) {\r\n\tconst row1 = node1.row;\r\n\tconst col1 = node1.col;\r\n\tconst row2 = node2.row;\r\n\tconst col2 = node2.col;\r\n\tlet x_dist = Math.abs(row2 - row1);\r\n\tlet y_dist = Math.abs(col2 - col1);\r\n\treturn x_dist + y_dist;\r\n}\r\n\r\nexport function getAStarPath(finishNode) {\r\n\tconst nodesInShortestPathOrder = [];\r\n\tlet currentNode = finishNode;\r\n\tif (currentNode.previousNode != null) {\r\n\t\twhile (currentNode !== null) {\r\n\t\t\tnodesInShortestPathOrder.unshift(currentNode);\r\n\t\t\tcurrentNode = currentNode.previousNode;\r\n\t\t}\r\n\t}\r\n\r\n\treturn nodesInShortestPathOrder;\r\n}\r\n","import React, { Component } from 'react';\r\nimport Node from './Node/Node';\r\nimport './PathfindingVisualizer.css';\r\nimport { dijkstra, getNodesInShortestPathOrder } from '../algorithms/dijkstra';\r\nimport { dfs, getDFSPath } from '../algorithms/dfs';\r\nimport { bfs, getBFSPath } from '../algorithms/bfs';\r\nimport { astar, getAStarPath } from '../algorithms/astar';\r\nexport default class PathfindingVisualizer extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {\r\n\t\t\tgrid: [],\r\n\t\t\tmouseIsPressed: false,\r\n\t\t\tstart_row: null,\r\n\t\t\tstart_col: null,\r\n\t\t\tfin_row: null,\r\n\t\t\tfin_col: null,\r\n\t\t\tset_start: false,\r\n\t\t\tset_end: false,\r\n\t\t\tinAnimation: false,\r\n\t\t};\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tconst grid = getInitialGrid();\r\n\t\tthis.setState({ grid });\r\n\t}\r\n\r\n\tanimateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n\t\tthis.clearPath();\r\n\t\tthis.setState({ set_end: false, set_start: false, inAnimation: true });\r\n\t\tfor (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n\t\t\tif (i === visitedNodesInOrder.length) {\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\tthis.animatePath(nodesInShortestPathOrder);\r\n\t\t\t\t}, 20 * i);\r\n\t\t\t\tthis.setState({ inAnimation: false });\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tconst node = visitedNodesInOrder[i];\r\n\t\t\t\tdocument.getElementById(`node-${node.row}-${node.col}`).className =\r\n\t\t\t\t\t'node node-visited';\r\n\t\t\t}, 20 * i);\r\n\t\t}\r\n\t}\r\n\r\n\tanimatePath(nodesInShortestPathOrder) {\r\n\t\tfor (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tconst node = nodesInShortestPathOrder[i];\r\n\t\t\t\tdocument.getElementById(`node-${node.row}-${node.col}`).className =\r\n\t\t\t\t\t'node node-shortest-path';\r\n\t\t\t}, 50 * i);\r\n\t\t}\r\n\t}\r\n\r\n\ttoggleOff() {\r\n\t\tthis.setState({ set_start: false, set_end: false });\r\n\t}\r\n\tvisualizeDijkstra() {\r\n\t\tconst { grid, start_row, start_col, fin_row, fin_col } = this.state;\r\n\t\tif (\r\n\t\t\tstart_row != null &&\r\n\t\t\tstart_col != null &&\r\n\t\t\tfin_row != null &&\r\n\t\t\tfin_col != null\r\n\t\t) {\r\n\t\t\tconst startNode = grid[start_row][start_col];\r\n\t\t\tconst finishNode = grid[fin_row][fin_col];\r\n\t\t\tconst visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n\t\t\tconst nodesInShortestPathOrder = getNodesInShortestPathOrder(\r\n\t\t\t\tfinishNode\r\n\t\t\t);\r\n\t\t\tthis.animateAlgorithm(visitedNodesInOrder, nodesInShortestPathOrder);\r\n\t\t}\r\n\t}\r\n\r\n\tvisualizeDFS() {\r\n\t\tconst { grid, start_row, start_col, fin_row, fin_col } = this.state;\r\n\t\tif (\r\n\t\t\tstart_row != null &&\r\n\t\t\tstart_col != null &&\r\n\t\t\tfin_row != null &&\r\n\t\t\tfin_col != null\r\n\t\t) {\r\n\t\t\tconst startNode = grid[start_row][start_col];\r\n\t\t\tconst finishNode = grid[fin_row][fin_col];\r\n\t\t\tconst visitedNodesInOrder = dfs(grid, startNode, finishNode);\r\n\t\t\tconst nodesInDFSPathOrder = getDFSPath(finishNode);\r\n\t\t\tthis.animateAlgorithm(visitedNodesInOrder, nodesInDFSPathOrder);\r\n\t\t}\r\n\t}\r\n\r\n\tvisualizeBFS() {\r\n\t\tconst { grid, start_row, start_col, fin_row, fin_col } = this.state;\r\n\t\tif (\r\n\t\t\tstart_row != null &&\r\n\t\t\tstart_col != null &&\r\n\t\t\tfin_row != null &&\r\n\t\t\tfin_col != null\r\n\t\t) {\r\n\t\t\tconst startNode = grid[start_row][start_col];\r\n\t\t\tconst finishNode = grid[fin_row][fin_col];\r\n\t\t\tconst visitedNodesInOrder = bfs(grid, startNode, finishNode);\r\n\t\t\tconst nodesInBFSPathOrder = getBFSPath(finishNode);\r\n\t\t\tthis.animateAlgorithm(visitedNodesInOrder, nodesInBFSPathOrder);\r\n\t\t}\r\n\t}\r\n\r\n\tvisualizeAStar() {\r\n\t\tconst { grid, start_row, start_col, fin_row, fin_col } = this.state;\r\n\t\tif (\r\n\t\t\tstart_row != null &&\r\n\t\t\tstart_col != null &&\r\n\t\t\tfin_row != null &&\r\n\t\t\tfin_col != null\r\n\t\t) {\r\n\t\t\tconst startNode = grid[start_row][start_col];\r\n\t\t\tconst finishNode = grid[fin_row][fin_col];\r\n\t\t\tconst visitedNodesInOrder = astar(grid, startNode, finishNode);\r\n\t\t\tconst nodesInAStarPathOrder = getAStarPath(finishNode);\r\n\t\t\tthis.animateAlgorithm(visitedNodesInOrder, nodesInAStarPathOrder);\r\n\t\t}\r\n\t}\r\n\r\n\thandleMouseDown(row, col) {\r\n\t\tconst { set_start, set_end, inAnimation } = this.state;\r\n\t\tif (!inAnimation) {\r\n\t\t\tif (set_start) {\r\n\t\t\t\tconst newGrid = setStartNode(this.state.grid, row, col);\r\n\t\t\t\tthis.setState({ grid: newGrid, start_row: row, start_col: col });\r\n\t\t\t} else if (set_end) {\r\n\t\t\t\tconst newGrid = setEndNode(this.state.grid, row, col);\r\n\t\t\t\tthis.setState({ grid: newGrid, fin_row: row, fin_col: col });\r\n\t\t\t} else {\r\n\t\t\t\tconst newGrid = getNewGridWithWallToggled(\r\n\t\t\t\t\tthis.state.grid,\r\n\t\t\t\t\trow,\r\n\t\t\t\t\tcol\r\n\t\t\t\t);\r\n\t\t\t\tthis.setState({ grid: newGrid, mouseIsPressed: true });\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\thandleMouseEnter(row, col) {\r\n\t\tif (!this.state.mouseIsPressed) return;\r\n\t\tconst newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n\t\tthis.setState({ grid: newGrid });\r\n\t}\r\n\r\n\thandleMouseUp() {\r\n\t\tthis.setState({ mouseIsPressed: false });\r\n\t}\r\n\r\n\ttoggleStart() {\r\n\t\tconst { set_start } = this.state;\r\n\t\tthis.setState({ set_start: !set_start, set_end: false });\r\n\t}\r\n\r\n\ttoggleEnd() {\r\n\t\tconst { set_end } = this.state;\r\n\t\tthis.setState({ set_start: false, set_end: !set_end }, () =>\r\n\t\t\tthis.forceUpdate()\r\n\t\t);\r\n\t}\r\n\r\n\tclearBoard() {\r\n\t\tconst grid = getInitialGrid();\r\n\t\tfor (const row of grid) {\r\n\t\t\tfor (const node of row) {\r\n\t\t\t\tdocument.getElementById(`node-${node.row}-${node.col}`).className =\r\n\t\t\t\t\t'node';\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.setState({\r\n\t\t\tgrid,\r\n\t\t\tmouseIsPressed: false,\r\n\t\t\tstart_row: null,\r\n\t\t\tstart_col: null,\r\n\t\t\tfin_row: null,\r\n\t\t\tfin_col: null,\r\n\t\t\tset_start: false,\r\n\t\t\tset_end: false,\r\n\t\t});\r\n\t}\r\n\r\n\tclearPath() {\r\n\t\tconst { grid } = this.state;\r\n\t\tfor (const row of grid) {\r\n\t\t\tfor (const node of row) {\r\n\t\t\t\tnode.isVisited = false;\r\n\t\t\t\tnode.previousNode = null;\r\n\t\t\t\tnode.isAddedToQueue = false;\r\n\t\t\t\tnode.distance = Infinity;\r\n\t\t\t\tif (!node.isStart && !node.isWall && !node.isFinish) {\r\n\t\t\t\t\tdocument.getElementById(\r\n\t\t\t\t\t\t`node-${node.row}-${node.col}`\r\n\t\t\t\t\t).className = 'node';\r\n\t\t\t\t}\r\n\t\t\t\tif (node.isFinish) {\r\n\t\t\t\t\tdocument.getElementById(\r\n\t\t\t\t\t\t`node-${node.row}-${node.col}`\r\n\t\t\t\t\t).className = 'node node-finish';\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { grid, mouseIsPressed } = this.state;\r\n\r\n\t\treturn (\r\n\t\t\t<>\r\n\t\t\t\t<nav className=\"NavbarItems\">\r\n\t\t\t\t\t<h1 className=\"navbar-logo\">\r\n\t\t\t\t\t\tPathFinder <i className=\"fas fa-road\"></i>\r\n\t\t\t\t\t</h1>\r\n\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tclassName=\"nav-button\"\r\n\t\t\t\t\t\tonClick={() => this.visualizeDijkstra()}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tVisualize Dijkstra\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tclassName=\"nav-button\"\r\n\t\t\t\t\t\tonClick={() => this.visualizeDFS()}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tVisualize Depth First Search\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tclassName=\"nav-button\"\r\n\t\t\t\t\t\tonClick={() => this.visualizeBFS()}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tVisualize Breath First Search\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tclassName=\"nav-button\"\r\n\t\t\t\t\t\tonClick={() => this.visualizeAStar()}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tVisualize A*\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tclassName=\"nav-button\"\r\n\t\t\t\t\t\tonClick={() => this.toggleStart()}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tSet Start Point\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<button className=\"nav-button\" onClick={() => this.toggleEnd()}>\r\n\t\t\t\t\t\tSet End Point\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<button className=\"nav-button\" onClick={() => this.toggleOff()}>\r\n\t\t\t\t\t\tSet Wall\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<button className=\"nav-button\" onClick={() => this.clearBoard()}>\r\n\t\t\t\t\t\tClear\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</nav>\r\n\r\n\t\t\t\t<div className=\"grid\">\r\n\t\t\t\t\t{grid.map((row, rowIdx) => {\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<div key={rowIdx}>\r\n\t\t\t\t\t\t\t\t{row.map((node, nodeIdx) => {\r\n\t\t\t\t\t\t\t\t\tconst {\r\n\t\t\t\t\t\t\t\t\t\tisStart,\r\n\t\t\t\t\t\t\t\t\t\tisFinish,\r\n\t\t\t\t\t\t\t\t\t\tisVisited,\r\n\t\t\t\t\t\t\t\t\t\tisWall,\r\n\t\t\t\t\t\t\t\t\t\trow,\r\n\t\t\t\t\t\t\t\t\t\tcol,\r\n\t\t\t\t\t\t\t\t\t} = node;\r\n\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t<Node\r\n\t\t\t\t\t\t\t\t\t\t\tkey={nodeIdx}\r\n\t\t\t\t\t\t\t\t\t\t\tisStart={isStart}\r\n\t\t\t\t\t\t\t\t\t\t\tisFinish={isFinish}\r\n\t\t\t\t\t\t\t\t\t\t\tisVisited={isVisited}\r\n\t\t\t\t\t\t\t\t\t\t\tisWall={isWall}\r\n\t\t\t\t\t\t\t\t\t\t\trow={row}\r\n\t\t\t\t\t\t\t\t\t\t\tcol={col}\r\n\t\t\t\t\t\t\t\t\t\t\tmouseIsPressed={mouseIsPressed}\r\n\t\t\t\t\t\t\t\t\t\t\tonMouseDown={(row, col) =>\r\n\t\t\t\t\t\t\t\t\t\t\t\tthis.handleMouseDown(row, col)\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\tonMouseEnter={(row, col) =>\r\n\t\t\t\t\t\t\t\t\t\t\t\tthis.handleMouseEnter(row, col)\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\tonMouseUp={() => this.handleMouseUp()}\r\n\t\t\t\t\t\t\t\t\t\t></Node>\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t})}\r\n\t\t\t\t</div>\r\n\t\t\t</>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nconst getInitialGrid = () => {\r\n\tconst grid = [];\r\n\tfor (let row = 0; row < 20; row++) {\r\n\t\tconst curr_row = [];\r\n\t\tfor (let col = 0; col < 50; col++) {\r\n\t\t\tcurr_row.push(createNode(row, col));\r\n\t\t}\r\n\t\tgrid.push(curr_row);\r\n\t}\r\n\treturn grid;\r\n};\r\nconst createNode = (row, col) => {\r\n\treturn {\r\n\t\trow,\r\n\t\tcol,\r\n\t\tisStart: false,\r\n\t\tisFinish: false,\r\n\t\tdistance: Infinity,\r\n\t\tisVisited: false,\r\n\t\tisWall: false,\r\n\t\tisAddedToQueue: false,\r\n\t\tpreviousNode: null,\r\n\t};\r\n};\r\n\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n\tconst newGrid = grid.slice();\r\n\tconst node = newGrid[row][col];\r\n\tconst newNode = {\r\n\t\t...node,\r\n\t\tisWall: !node.isWall,\r\n\t};\r\n\tnewGrid[row][col] = newNode;\r\n\treturn newGrid;\r\n};\r\n\r\nconst setStartNode = (grid, row, col) => {\r\n\tconst newGrid = grid.slice();\r\n\tfor (const node of newGrid) {\r\n\t\tfor (const row of node) {\r\n\t\t\trow.isStart = false;\r\n\t\t}\r\n\t}\r\n\tconst node = newGrid[row][col];\r\n\tconst newNode = {\r\n\t\t...node,\r\n\t\tisStart: true,\r\n\t};\r\n\tnewGrid[row][col] = newNode;\r\n\treturn newGrid;\r\n};\r\nconst setEndNode = (grid, row, col) => {\r\n\tconst newGrid = grid.slice();\r\n\tfor (const node of newGrid) {\r\n\t\tfor (const row of node) {\r\n\t\t\trow.isFinish = false;\r\n\t\t}\r\n\t}\r\n\tconst node = newGrid[row][col];\r\n\tconst newNode = {\r\n\t\t...node,\r\n\t\tisFinish: true,\r\n\t};\r\n\tnewGrid[row][col] = newNode;\r\n\treturn newGrid;\r\n};\r\n","import React from 'react';\nimport './App.css';\nimport PathfindingVisualizer from './PathfindingVisualizer/PathfindingVisualizer';\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<PathfindingVisualizer></PathfindingVisualizer>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}